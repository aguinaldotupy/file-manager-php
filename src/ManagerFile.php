<?phpnamespace Tupy\FileManager;use Illuminate\Support\Facades\Storage;use Intervention\Image\Facades\Image;class ManagerFile{    /**     * @var string     */    private $disk;    /**     * @var string     */    private $visibility;    /**     * @var string     */    private $path;    private $caption;    /**     * @var int     */    private $order;    private $object_instance;    private $file;    private $type;    /**     * @var array     */    private $expression;    private $uploadBy;    public function __construct($object_instance, array $expression = [])    {        $this->disk = $expression['disk'] ? $expression['disk'] : 'public';        $this->visibility = $expression['visibility'] ? $expression['visibility'] : 'private';        $this->path = $expression['path'] ? $expression['path'] : "notSpecific";        $this->file = $expression['file'] ? $expression['file'] : \Request::file('image');        $this->caption = $expression['caption'] ? $expression['caption'] : null;        $this->order = $expression['order'] ? $expression['order'] : 0;        $this->type = $expression['type'] ? $expression['type'] : \Str::random(10);        $this->object_instance = $object_instance;        $this->uploadBy = $expression['uploaded_by'];        $this->expression = $expression;    }    public static function make($object_instance, array $expression = [])    {        return new ManagerFile($object_instance, $expression);    }    public function uploadFile($file)    {        //Pego a extensão/MimeType do ficheiro        $mimeTypeExtension = $file->getMimeType();        //Pego somente a extensão (.pdf) para manter no nome do ficheiro        $extension = $file->getClientOriginalExtension();        //Gero o nome do ficheiro        $filename = md5($file . time()) . '.' . $extension;        //Pego o tamanho do ficheiro para salvar no db        $size = $file->getSize();        //Salvo no storage conforme os dados enviados ou com o default        $upload = Storage::disk($this->disk)->putFileAs($this->path, $file, $filename, $this->visibility);        if ($upload == true) {            $results = [                'type' => $this->type,                'uploaded_by' => $this->uploadBy,                'full_name' => "{$this->path}/$filename",                'mime_type' => $mimeTypeExtension,                'extension' => $extension,                'size' => $size,                'path_storage' => $this->path,                'disk' => $this->disk,                'visibility' => $this->visibility,                'order' => $this->order,                'caption' => $this->caption,                'origin' => 'Default',                'true_timestamp' => null,            ];            $this->object_instance->files()->updateOrCreate([                'type' => $this->type,            ],$results);        }    }    public static function get(array $expression)    {        // dd($expression);        $value = self::getValueFile($expression);        $url = self::getStorage($value);        return $url;    }    //Verificar na base de dados de forma dinâmica o disco e a visibilidade ao executar uma função de get    protected static function getStorage(array $expression = null)    {        $defaultCloud = 's3';        $defaultLocal = 'public';        if (is_array($expression)) {            $filename = $expression['value'];            $disk = $expression['disk'];            $visibility = $expression['visibility'];            if ($visibility == 'public') {                $file = Storage::disk($disk)->url($filename);            } else {                $file = Storage::disk($disk)->temporaryUrl($filename, Carbon::now()->addMinutes(5));            }        } else {            $file = Storage::disk($defaultLocal)->url($expression);        }        return $file;    }    public static function imageUpload(array $expression = null)    {        if ($expression) {            $disk       = $expression['disk'] ? $expression['disk'] : 's3';            $visibility = $expression['visibility'] ? $expression['visibility'] : 'private';            $path       = $expression['path'] ? $expression['path'] : "notSpecific";            $value      = $expression['value'] ? $expression['value'] : \Request::file('image');            $caption    = $expression['caption'] ? $expression['caption'] : null;            $order      = $expression['order'] ? $expression['order'] : 0;        } else {            $disk       = 's3';            $visibility = 'private';            $path       = 'notSpecific';            $value      = $expression;            $caption    = null;            $order      = null;        }        if ($value != null) {            // if a base64 was sent, store it in the db            if (starts_with($value, 'data:image') || is_file($value)) {                //Make the image                $image = Image::make($value)->resize(600, null, function ($constraint) {                    $constraint->aspectRatio();                })->crop(500, 500)->encode('jpg');                //Generate a filename.                $filename = md5($value . time()) . '.jpg';                //Store the image on disk.                $upload = Storage::disk($disk)->put($path . '/' . $filename, $image->stream(), $visibility);                // dd($upload);                // Se o store der certo, envia os dados de retorno para salvar na relacão de tabela                if ($upload == true) {                    $size = Storage::disk($disk)->size($path . '/' . $filename);                    $results = [                        'file_name'     => $filename,                        'extension'     => $image->mime(),                        'size'          => $size,                        'path_storage'  => $path,                        'disk'          => $disk,                        'visibility'    => $visibility,                        'caption'       => $caption,                        'order'         => $order,                        'true_timestamp' => Carbon::now()                    ];                    if(isset($expression['object_instance'])){                        $object_instance = $expression['object_instance'] ;                        $type = $expression['type'];                        self::saveRelation($object_instance, $type, $results);                    }                } else {                    $results = false;                }            }        } else {            $results = null;        }        return $results;    }    /**     * @param object $instance_object     * @param String $type Qual o nome do tipo da imagem ou o name que você recebe no request     * @param array $expression Um array com as informações a serem salvo     * [     *      'file_name'         => 'name',     *      'extension'         => 'img/png' (mimetype),     *      'size'              => 1 (int),     *      'path_storage'      => 'documents' (string),     *      'disk'              => 'local' (string),     *      'visibility'        => 'public' (string),     * ]     *     * @return void[$instance_object, $type, $expression]     */    protected static function saveRelation(object $instance_object, string $type, array $expression)    {        $instance_object->files()->updateOrCreate(            [                'fileable_id'   => $instance_object->id,                'type'          => $type,            ],            [                'fileable_id'    => $instance_object->id,                'type'           => $type,                'full_name'      => $expression['full_name'],                'name'           => $expression['name'],                'mime_type'      => $expression['mime_type'],                'extension'      => $expression['extension'],                'size'           => $expression['size'],                'path_storage'   => $expression['path_storage'],                'disk'           => $expression['disk'],                'visibility'     => $expression['visibility'],                'order'          => $expression['order'],                'caption'        => $expression['caption'],                'origem'         => $expression['origem'],                'true_timestamp' => $expression['true_timestamp'],            ]        );    }    public static function exists(array $expression)    {        $request    = request()->instance();        // Se for um array, deve ser enviado quando o tipo do arquivo e qual o ID do user        if (is_array($expression)) {            $type = $expression['type'];            $object_instance = $expression['object_instance'];        } else {            //Se a solicitação da imagem vem de um form de create, no url deve conter o parametro de id            if ($request->id == true) {                $id     = $request->id;                $type   = $expression;            } else {                //Se estiver em uma rota onde não consegue passar variáveis, vamos tentar buscar no URL o id do user                $uri    = explode('/', $request->route()->uri);                $vai    = $uri[1];                $id     = $request->$vai;                $type   = $expression;            }        }        if (isset($object_instance)) {            $file = $object_instance->file()->where('type', $type)->first();            // dd($file);            // $file = FileUser::where([['user_id', '=', $id], ['field_application', $type]])->first();            if (isset($file->path_storage) && isset($file->file_name)) {                $path = $file->path_storage;                $file_name = $file->file_name;                $fullName = $path . "/" . $file_name;                $disk = $file->disk;                $value = Storage::disk($disk)->exists($fullName);            } else {                $value = false;            }        } else {            $value = false;        }        return $value;    }    public static function imageCheck()    {        return Storage::disk('public')->url('helper/check.png');    }    public static function imageUserNull()    {        $imageNull = config('file-manager.placeholder');        return $imageNull;    }    public static function fileNull()    {        return Storage::disk('public')->url(config('file-manager.no_image'));    }    //Vou dar retorno de 1 file ou de vários ou terei uma função que pode me retornar mais de 1?    protected static function getValueFile(array $expression)    {        // Se for um array, deve ser enviado quando o tipo do arquivo e qual o ID do user        if (is_array($expression)) {            $type = $expression['type'];            $object_instance = $expression['object_instance'];        }        if (isset($object_instance)) {            // $file = FileUser::where([['user_id', '=', $id], ['field_application', $type]])->first();            $file = $object_instance->file()->where('type', $type)->first();            if (isset($file->path_storage) && isset($file->file_name)) {                $path = $file->path_storage;                $file_name = $file->file_name;                $disk = $file->disk;                $visibility = $file->visibility;                $value = [                    'value'         => $path . "/" . $file_name,                    'disk'          => $disk,                    'visibility'    => $visibility,                ];            } else {                $value = config('file-manager.no_image');            }        } else {            $value = config('file-manager.no_image');        }        return $value;    }}